// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: slot/slot.proto

package schedulingservicepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SchedulingService_GetSlot_FullMethodName        = "/schedulingservicepb.SchedulingService/GetSlot"
	SchedulingService_UpdateSlot_FullMethodName     = "/schedulingservicepb.SchedulingService/UpdateSlot"
	SchedulingService_DeleteManySlot_FullMethodName = "/schedulingservicepb.SchedulingService/DeleteManySlot"
	SchedulingService_UpdateManySlot_FullMethodName = "/schedulingservicepb.SchedulingService/UpdateManySlot"
)

// SchedulingServiceClient is the client API for SchedulingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchedulingServiceClient interface {
	GetSlot(ctx context.Context, in *GetSlotRequest, opts ...grpc.CallOption) (*GetSlotResponse, error)
	UpdateSlot(ctx context.Context, in *UpdateSlotRequest, opts ...grpc.CallOption) (*UpdateSlotResponse, error)
	DeleteManySlot(ctx context.Context, in *DeleteManySlotRequest, opts ...grpc.CallOption) (*DeleteManySlotResponse, error)
	UpdateManySlot(ctx context.Context, in *UpdateManySlotRequest, opts ...grpc.CallOption) (*UpdateManySlotResponse, error)
}

type schedulingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSchedulingServiceClient(cc grpc.ClientConnInterface) SchedulingServiceClient {
	return &schedulingServiceClient{cc}
}

func (c *schedulingServiceClient) GetSlot(ctx context.Context, in *GetSlotRequest, opts ...grpc.CallOption) (*GetSlotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSlotResponse)
	err := c.cc.Invoke(ctx, SchedulingService_GetSlot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulingServiceClient) UpdateSlot(ctx context.Context, in *UpdateSlotRequest, opts ...grpc.CallOption) (*UpdateSlotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSlotResponse)
	err := c.cc.Invoke(ctx, SchedulingService_UpdateSlot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulingServiceClient) DeleteManySlot(ctx context.Context, in *DeleteManySlotRequest, opts ...grpc.CallOption) (*DeleteManySlotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteManySlotResponse)
	err := c.cc.Invoke(ctx, SchedulingService_DeleteManySlot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulingServiceClient) UpdateManySlot(ctx context.Context, in *UpdateManySlotRequest, opts ...grpc.CallOption) (*UpdateManySlotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateManySlotResponse)
	err := c.cc.Invoke(ctx, SchedulingService_UpdateManySlot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchedulingServiceServer is the server API for SchedulingService service.
// All implementations must embed UnimplementedSchedulingServiceServer
// for forward compatibility.
type SchedulingServiceServer interface {
	GetSlot(context.Context, *GetSlotRequest) (*GetSlotResponse, error)
	UpdateSlot(context.Context, *UpdateSlotRequest) (*UpdateSlotResponse, error)
	DeleteManySlot(context.Context, *DeleteManySlotRequest) (*DeleteManySlotResponse, error)
	UpdateManySlot(context.Context, *UpdateManySlotRequest) (*UpdateManySlotResponse, error)
	mustEmbedUnimplementedSchedulingServiceServer()
}

// UnimplementedSchedulingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSchedulingServiceServer struct{}

func (UnimplementedSchedulingServiceServer) GetSlot(context.Context, *GetSlotRequest) (*GetSlotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSlot not implemented")
}
func (UnimplementedSchedulingServiceServer) UpdateSlot(context.Context, *UpdateSlotRequest) (*UpdateSlotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSlot not implemented")
}
func (UnimplementedSchedulingServiceServer) DeleteManySlot(context.Context, *DeleteManySlotRequest) (*DeleteManySlotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteManySlot not implemented")
}
func (UnimplementedSchedulingServiceServer) UpdateManySlot(context.Context, *UpdateManySlotRequest) (*UpdateManySlotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateManySlot not implemented")
}
func (UnimplementedSchedulingServiceServer) mustEmbedUnimplementedSchedulingServiceServer() {}
func (UnimplementedSchedulingServiceServer) testEmbeddedByValue()                           {}

// UnsafeSchedulingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchedulingServiceServer will
// result in compilation errors.
type UnsafeSchedulingServiceServer interface {
	mustEmbedUnimplementedSchedulingServiceServer()
}

func RegisterSchedulingServiceServer(s grpc.ServiceRegistrar, srv SchedulingServiceServer) {
	// If the following call pancis, it indicates UnimplementedSchedulingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SchedulingService_ServiceDesc, srv)
}

func _SchedulingService_GetSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulingServiceServer).GetSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchedulingService_GetSlot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulingServiceServer).GetSlot(ctx, req.(*GetSlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulingService_UpdateSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulingServiceServer).UpdateSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchedulingService_UpdateSlot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulingServiceServer).UpdateSlot(ctx, req.(*UpdateSlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulingService_DeleteManySlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteManySlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulingServiceServer).DeleteManySlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchedulingService_DeleteManySlot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulingServiceServer).DeleteManySlot(ctx, req.(*DeleteManySlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulingService_UpdateManySlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateManySlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulingServiceServer).UpdateManySlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchedulingService_UpdateManySlot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulingServiceServer).UpdateManySlot(ctx, req.(*UpdateManySlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SchedulingService_ServiceDesc is the grpc.ServiceDesc for SchedulingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SchedulingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "schedulingservicepb.SchedulingService",
	HandlerType: (*SchedulingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSlot",
			Handler:    _SchedulingService_GetSlot_Handler,
		},
		{
			MethodName: "UpdateSlot",
			Handler:    _SchedulingService_UpdateSlot_Handler,
		},
		{
			MethodName: "DeleteManySlot",
			Handler:    _SchedulingService_DeleteManySlot_Handler,
		},
		{
			MethodName: "UpdateManySlot",
			Handler:    _SchedulingService_UpdateManySlot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "slot/slot.proto",
}
